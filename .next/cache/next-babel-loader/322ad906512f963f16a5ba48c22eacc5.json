{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\n\nvar Information = function Information(props) {\n  return __jsx(\"div\", null, __jsx(\"h1\", null, props.country.name));\n};\n\n_c = Information;\n\nInformation.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var id, res, country;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = url.query.id;\n            console.log(id);\n            _context.next = 4;\n            return fetch(\"https://restcountries.eu/rest/v2/name/\".concat(id, \"?fullText=true\"));\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            country = _context.sent;\n            console.log(\"Fetched country: \".concat(country.alpha3Code));\n            return _context.abrupt(\"return\", {\n              country: country\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Information;\n\nvar _c;\n\n$RefreshReg$(_c, \"Information\");","map":{"version":3,"sources":["C:/Users/Peter Stavrinou/countries/pages/info.js"],"names":["fetch","Information","props","country","name","getInitialProps","url","id","query","console","log","res","json","alpha3Code"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAChB,mBACG,kBAAKA,KAAK,CAACC,OAAN,CAAcC,IAAnB,CADH,CADgB;AAAA,CAApB;;KAAMH,W;;AAMNA,WAAW,CAACI,eAAZ;AAAA,sEAA8B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,EADsB,GAChBD,GAAG,CAACE,KAAJ,CAAUD,EADM;AAE5BE,YAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AAF4B;AAAA,mBAGVP,KAAK,iDAA0CO,EAA1C,oBAHK;;AAAA;AAGtBI,YAAAA,GAHsB;AAAA;AAAA,mBAINA,GAAG,CAACC,IAAJ,EAJM;;AAAA;AAItBT,YAAAA,OAJsB;AAM5BM,YAAAA,OAAO,CAACC,GAAR,4BAAgCP,OAAO,CAACU,UAAxC;AAN4B,6CAQrB;AAAEV,cAAAA,OAAO,EAAPA;AAAF,aARqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAWA,eAAeF,WAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\nconst Information = (props) => (\r\n    <div>\r\n       <h1>{props.country.name}</h1>\r\n    </div>\r\n)\r\n\r\nInformation.getInitialProps = async(url) => {\r\n  const id  = url.query.id\r\n  console.log(id);\r\n  const res = await fetch(`https://restcountries.eu/rest/v2/name/${id}?fullText=true`)\r\n  const country = await res.json()\r\n\r\n  console.log(`Fetched country: ${country.alpha3Code}`)\r\n\r\n  return { country }\r\n}\r\n\r\nexport default Information"]},"metadata":{},"sourceType":"module"}